Welcome to principled AI coding.
This is lesson two.
You've learned the fundamentals now let's progress to the next level of AI coding with multi file editing.
AI coding across multiple files is a no brainer must have necessity for efficient engineering in the age of generative AI.
In this lesson we're going to build on the fundamentals so you can quickly create and modify files across your code base quickly and concisely.
Before we dive in, Let's establish the key principle behind this lesson Big Three Bull's Eye What does that mean?
At the heart of every A coding assistant there are three vital components that make the magic happen.
Context model prompt
We are going to refer to these as the Big Three master, these three elements and you'll unlock the full power of AI coding for today's tools and tomorrow's tools.
Great a coding comes when you take the Big Three context model and prom and consistently intersect them like your thorough darts, and you want to hit the center where you give just enough context, Select the right model for the job and design the right AI coding prompt when you line these three elements you'll know it because moments after you send your prompt your code will update in just the way you wanted the magic happens at the intersection, the sweet spot where the context model imprompt work together seamlessly.
This is the bull's eye and with every prompt you write you want to be striking the bull's eye.
As we mentioned, A big challenge with a coding is that it's easy to get started and it's hard to get more done over time.
That's because each of these three elements have to be selected properly to maximize efficiency
If one is wrong, for instance, if your model is not powerful enough, it doesn't matter what context or what prompt you have, you'll run into issues The same goes for your prompt and the same goes for your context if one of these are off your coding assistant will not generate the code you're looking for throughout upcoming lessons will discuss how to select the right model and build great AI coding prompts, but in this lesson we're focusing in on the context on top of the kiss principle, Keep the big three bull's eye principle in front of your mind as you're writing code with AI with each prompt, Imagine you're aiming for the center the bull's eye.
Now let's turn this principle into practical AI coding actions with a focus on context management.
Let's continue from our previous application.
From lesson one we're going to open up the terminal.
If I type Ls, you can see we have our previous lesson one code base there.
Check your loop box below for the Get Clone command.
For the lesson to code base, I'll clone that in now with get clone and I'll paste in that UL great.
If we clear and Ls, we should see that next code base all CD into the second principled AI coding code base type Ls.
I'm going to use code.for VS code.
Now you should see a similar code base with a couple changes.
All I'll open up the terminal here with command J and now we're going to run some set UPS, so if you open up the Read Me file, you should see a couple of setup instructions I'll run UV Sync UV is a modern Python package manager, will be using this moving forward, Since it makes Python dependencies easier to work with, details on this tool, be in the description but from lesson one you should have this already installed, go ahead and sync
This will install all the dependencies needed.
Clear Now we're going to copy this.mt sample into a true.in file, so I'll just type cp.in tabto complete and then I'll type.m.
So now this will copy this into a new.environment file.
Now go ahead and paste your Api key.
We're going to be using this to run a prompt in our transcript Analytics application here someone to go ahead, cut the video, paste this in here remember you don't want anyone to see your Api keys now you should be able to run UV main so go ahead and kick that off all type UV main and as you can see, we have the previous generation from our lesson one code base outputting the exact same output So if we clear that UV Run Main is the equivalent of running Python.
Remember we're using the UV Package Manager details in the description if you want to read more into UV, but moving forward this is what we're going to be using to run so I'll clear and now let's go ahead and open up our main file and you should recognize that this is the exact same code from our lesson one we're going to be building upon this and now that we have all of our dependencies and solved Let's refocus on our main file, Everything we do as engineers is about moving toward an end state.
It's all about the value you're adding to the applications you're building.
It's never been more important to be 100% clear about what you want to build, because now you can delegate that work to your AI coding assistant.
Let's go ahead and make a simple checklist of what we want to accomplish and why it's valuable.
First, we're going to do here is update the application to pass in a path to a transcription file as a Ci argument, so that means that when we run UV run Main we want to be able to pass in a path to a file instead of having our transcript.txt hardcoded That's valuable because it allows us to run our Transcript app on any file next we're going to add a blacklist so that we only count useful words this way we can filter out words.
Let's go and run our program again.
This way we can filter our words like two of you a can these are all really low value words?
Right, when we're doing transcript analysis it isn't useful to see these words, so the blacklist is valuable because it allows us to get rid of these noisy, low value words after that will add a call to the Open AI Api to enable a quick summary of our transcript we're going to get a couple things from our open AI Api call it's going to run a large language model and then we want to generate a quick summary bullet point highlights and a sentiment analysis of the transcript
We also want to extract some of the keywords from our frequency analysis
This is valuable because it makes it easy to understand and consume content in the transcript at a deeper level very quickly, so let's go ahead and walk through each one of these changes, their new AI coding superpowers Remember, keep it simple and focus on doing one thing at a time this way will work our way up from the fundamentals to more complex AI coding tasks.
Let's go ahead and open the terminal clear and let's boot up AER, so I'll just type AER and just as before all hit Slash Add and if we just type Main, we'll see AER Auto completing the path to our new main file.
Add that now let's go ahead and run our first a coding prompt.
We want to update Main to accept a new Ci argument transcript file, so I'm going to type literally that in natural language.
Here Update Main to accept a CLI Arg transcript file.
Ci is command line interface and Arg stands for argument.
These are common short names that the large language model already knows about.
It's important to call that out.
Let's go ahead and fire this prompt and you can see AER automatically writing this code for us.
It's now parsing out the argument and now that's getting used here. args.transcript file It's asking
If we want to run Python with the transcript file as an argument, we're going to type D, which stands for Don't ask again.
Remember, we're using UV Main to run our program now, so just hit D and now it's asking if we want to add transcript to the chat again will hit D so that it doesn't ask us again, will clear the input now will manually run this so that we validate that our AI coding assistant made the right changes. I'll open up a new terminal window in VS.
Code.
You can do that with command Shift J and now I'll type UV run Main.
If I hit Enter here you'll see that we now need a transcript file, so I'll run UV, run main and then I'll give a path to a transcript file if we look at the directory here we have two transcript files in the code base and we can now run both of these and any other transcript file you want to add so I'll run transcript txt T that got kicked off just as before, but now our program is dynamic, so I hit up and change this to transcript to we get a completely different result because we have two transcript files here so this is incredible now let's go ahead and make our first multi file edit we're going to ask EOR to move our parsing logic which is this code here into a separate file, so we're going to do that with another a quitting prompt and we'll save this move C Arg parsing into a file next to Main PY called Arg parse PY Okay, so this is important let's just walk through this prompt we're using a move keyword here this is important Ci Arg parsing so we're specifying what we're saying we want to move it into a file next to main PY called Arg Parset PY we'll go ahead, fire that off and let it do the heavy lifting for us so you can review the changes right at the top here we see we're now importing we now have this brand new file here right next to our main file art parse Up PY that looks good now a asking us explicitly
Do you want to create this file will of course, say yes, this is really cool so now AER is saying
We applied edits to both of these files to edits in one shot and now we have another file added to our context window so this is really interesting.
Right it's going unclear and let's review these changes.
So now we have this function parse arguments and if we dive into this method here you can see we have a brand new file right next to main and it's doing the exact same thing, right, so this is why the move keyword was important as you write code with AI you'll find certain words are very, very useful at conveying specific actions to the accounting system and to the LLM will dive more into those in our next lesson, but for now this looks great and you can see here we have two files in our context.
Now we have our parse and we have main now either is explicitly looking at these two files.
Let's go ahead and make another change.
We have this min threshold variable here with a default value of three.
Let's go ahead and make this also a command line argument.
That way we can dynamically limit the words that show up in our word counter so to do that we'll just say move and now I'm going to explicitly specify this variable name, so I'll say I go and just paste this and so move men count threshold into parse arguments.
This is another really important thing, so if we look at this file here there's a explicit function named parse arguments, so I'm explicitly calling out two different pieces of state in our program this is a variable and this is a function and I'm saying move the variable into the function embedded in this information.
This is really important to call out.
Embedded in this information is the location of these items.
We know that these items are both inside these two files, and there are no duplicates anywhere of this variable name and this function name, so we can be confident that our a coding assistant will locate and move these files properly, so I'll go ahead and write that and we'll add one more thing will say default three Right, because we still want to have a default value we don't want to specify this variable if we don't have to so we'll go ahead and fire that off.
Wonderful you can see we have the applied edit to both these files.
We're going to hit D and let's go and review the code quickly.
Same kind of deal here we have arg you can see that our main count threshold is now part of our argument.
Look up right so if we just search this research args you can see that that is right there it's going to activate Rex search so you can see that we're now fully relying on args for both our transcript file and our men count threshold.
If we go into Arg parse you can now see a or created this variable for us.
It's parsing this out of the command line argument and it's giving US-A default value here, so we'll go ahead, open up the terminal clear will type UV run main and you can see here we have an issue in order to fix this I'm going to introduce you to a new command so let's go back to AER and let's go ahead and type the/run so this is a really important command this allows you to effectively run any shell command inside of AER after this runs the output is going to be directly appended right back to AER so/run and then we'll just go ahead and type UV run main so you can see there we have the output of the error and now AER is asking us do you want to output this to the chat.
The chat is the context of the entire conversation that we're having, we're going to hit Yes, and this is going to allow AER to automatically fix the issue for us.
If we got back to Maine, you can see it added this.for us so that we have the correct relative.
Import a quick tip here you can hit Control Z in a file to undo the change AD or just made so hit control z you can see that.was all that was changed in this file, right, so I can control Z and then control shift Z to redo, so this is great now it is asking if we want to actually run this command again I'm going to hit No this time switch back to our other terminal window and then type UV, Run Main It looks like everything's working now we just need to add our transcript file, So will hit UV run main and then transcript to So if we kick this off
Now you can see our programs working just as before, we can rerun this with transcript one and you can see that that works great now what we can do here is go to enlarge this a little bit now we can go ahead, run this again and also specify this command line argument so what do we have here?
We have men count threshold I'm going to go ahead and copy this and if we paste this and we'll say eight, so keep this up to eight.
Now we're only getting the words that have more than eight frequencies in the transcript, right, and we can easily tweak this, we can go ahead and bump that up to twelve you can see all the words up from here and we can go you know, as high as we like here.
So if you say 20 we're not only getting the, you know very top results, so that's awesome network we did a couple things there we had our AI coding assistant AD Min count thresholds here and we also had a or automatically fix this import.
We definitely should have named our Parse something a little different Since there is The Standard library Arg Parse package, but this is totally fine for now, so let's go ahead and refocus on a few commands that can help you manage the context of your files if we switch back to AER, clear the input and type/you can see a whole list of commands here we've only been looking at Add and just recently run let's go ahead and look at another command here called Drop Drop allows you to remove files from your Context Windows so if you run drop by itself.
This will clear every file from AERs context window, so now AER is effectively looking at nothing.
We can go ahead and type Slash, add to go ahead and add our main file back.
If we just type Main you can see that we're getting some nice auto complete from AER.
These are the two most important commands by far that are important to keep front of mind.
You want to be dropping specific files that don't help you and that aren't relevant for the task you're trying to complete, and then you want to be adding files that are relevant for the task you want to complete so just as an example will go ahead and add our art parse once again and then we can/drop and if we just start typing Arg Parse we can remove the Arg parse file so these are really, really important, this is context management You don't want your a coding assistant looking at files, it doesn't need to execute your prompt and help you accomplish your task and your goal.
Remember the bull's eye you want to be hitting the center of the bulls eye with the right context, the right model and the right prompt we're going to be talking about the model in future lessons and in our next lesson we're going to be focusing on writing incredible prompts, but for now it's all about the context window There are two more important commands I want to share with you here let's go ahead and look at the/tokens, so/tokens gives you a rundown of the total tokens inside your context window you can see here we have system messages.
This is just built and there's nothing we can change about the system messages, but then we have a couple interesting variables that we do have more control over, we have the chat history and our main file and you can see here a or says you know you can do/drop to remove this and you can use/clear to reset your chat history so let's go ahead and try that out will type/clear, hit enter and then/tokens again and I'll enhance my window here so you can get a full view and you can see here before we had 1000 tokens in our chat history and now that row has been completely removed.
This is a great way to monitor costs.
You can see previously our chat history consumed you know a fourth of a cent, so this is not a huge deal by any stretch of the imagination.
You can also see the model that you're using here you might be using a different model, maybe using an anthropic model or a future GPT version, Whatever you're using here is totally good will dig more into models and which model you should be using for the job you're trying to accomplish in future lessons, but for now it's important to learn that you can use/tokens to see your current token usage and you can see we only have one file here again if we were to/ad and then pull back in that Arg parse and then type Slash tokens you can see we now have two files in our context window
This is something that is going to be important to manage, I do just want to highlight you want to be spending money to save time and the age of generative AI It is important that you move as quickly as you can get as much as you can done and go ahead and spend the few cents the half dollar, the couple dollars that you need to on a day to day basis in order to move at light speed as we'll talk about in future lessons soon there will not be another choice, you will need to be using these A coding tools.
I'm glad you're here and you're making the right move by getting ahead, by focusing on investing in yourself, so let's go ahead and continue our multiple editing.
Now let's go ahead and add a blacklist if you remember here, if we run our program again, we have a bunch of words that don't provide a lot of value for us in particular, it's the common English words right and the two of these are words that aren't important for transcript analysis, So let's go ahead and add a blacklist which will filter out these words for us will run this prompt all say create constants, Stop PY next to main add a word blacklist some specifying a variable here word blacklist and we'll go ahead and use the VAR keyword after that.
So who knows it's a variable based off transcript txt so I'm going to mention this file here with words like to and the etc, then filter out words in main Okay, so let's go ahead and just run through this prompt again.
Let's walk through what we're asking for we're saying create a contents file next to main, Okay, so we're going to create a new file next to main AER can see the main file, so it knows where that is we're saying add a blacklist variable and we're saying based off transcript.txt with words, likes or you know, specifying a few words to give a or a pattern to look at we're saying then filter out words in main so inside of the main file we're saying use the blacklist to actually filter out words here, so let's go ahead and kick this off we can quickly review the changes we have this word in blacklist check, We're importing our new file and then we have our new content, Stop PY file with the word Blacklist variable I'll go ahead and hit Why you can see there once again we have two files getting edited and now we can review our changes here, so we now have this word blacklist and if we go ahead and open this file up you can see we have a new constants file that was created so now we have three files and all three of these files are now in our context window, we have to and the a of so on and so forth and if we look at Main we're now continuing if the word is in blacklist right, so word in blacklist and this is a set so there are no duplicates here, which is really nice so if there's a word in the blacklist We're just going to continue, we're going to completely skip over it.
Right, let's go ahead and run this again, we're going to just hit up, we'll run with a men count threshold ten and will run on the transcript file, will enter and now what we can do is if we look for the which previously was our most popular word you can see the is no longer in our list.
Right, thought it's filtered out and is filtered out, many things are filtered out of our list.
We can easily come in here and modify our blacklist and make tweaks to it so that we filter out additional words.
If we go ahead and run this on our transcript to file, we can get a different set of results and we'll go ahead and drop men count to five every we look through this we can see a couple of things right, so looks like our threshold is working great and we are still filtering out all those items, but there are some other items that we might want to add in the future.
Now we have a simple system to quickly add and modify items in the blacklist.
One more change we want our AI coding assistant to make we do have these trailing items.
We're using a simple split method here which just separates the transcript by a space.
This is the default parameter for a split, so what we want to do is strip the kind of ending punctuation, the question marks, commas, so on and so forth, right, so we're just going to run another simple
A coding prompt to do that for US-As you're gaining abilities and improving your
A coding skills Resist the urge to make code edits by hand if you've been engineering for you know, a year, five years, ten years, whatever it is, you know that you can just quickly come in here can hit.and then you can just run the strip I really want to urge you to resist all desire to change the file manually by yourself.
This is going to help you transition faster into using a coding tools, every, a quitting prompt, Every change you need to make is an opportunity for you to hone your abilities.
This might seem like a silly thing to do for such a small change, but this adds up over time.
It's also another great place to practice our context management.
We don't need our Art parse or constants files anymore so we can just say/drop and then I'll pass an art parse and I'll also pass in constants Okay, so we're going to drop both those files you can see those removed from the chat and now we're just operating in our main file I'll hit Control l Clear the chat and now I'll run Update word.lower so being really specific about where this changes strip and then I'm just going to add a list of items.
Right, some was going to say strips.coma exclamation and what else do we have in our output there that we might want filtered out?
I think that looks good.
Right so we'll just start with these items and we'll just fire that off type so really simple prompt really simple fix you know exactly what it's going to do.
This is also another great way to practice E coding when it's a simple change, you know exactly what should be changed, so you can quickly and easily validate that it works.
Okay, so we're going to just hit up, run this again and now you can see we have just pure words in our list here which looks really great so our blacklist is now working and it looks great, so let's move on to our next task.
Now that you have a grasp on multiple editing, let's go ahead and make a more interesting change.
Let's add summarization and some minor sentiment analysis to our transcript analysis application.
By running an open AI Api call, the first thing we need to do here, Since we're going to be using the structured outputs Api and we'll dig into what all the stuff means in a moment here.
The first thing we need to do is create a new typings file where we can store the type that we want our request to respond in.
What we'll do here is run this prompt Create data type Stop Pi again I'll say next to Main just to make it easy to specify where I'll say use Pydantic and if you open up the PY project Toml, you can see we have Opening Eye and Pydantic as dependencies, so use by dantic Add And now I'm going to specify a type that I want created so all transcript analysis and I'm going to pass in base model here and other parameters so that it knows what I'm building here is a pedantic class object and then I'm going to use an interesting pattern here in curly brackets I'm going to specify the fields that I want inside this type quick Summary Bullet Point highlights sentiment analysis Okay, so those are going to be the three variables we want
This looks great and it likely doesn't need any improvements, but we can still make it a little more accurate by defining and giving the LM some hints about what we want, the types of each one of these variables to be so I'll backtrack a little bit and move to quick summary and I'll just say st right we all know that stands for string and for the bullet point highlights, I also say st with all specified as a list with the square brackets and then sentiment analysis is, of course, just a string st Okay so now we'll hit enter here and we'll let AER generate this for us, go and create file Yes, once to install will go ahead and skip this we're to have that installed and now we should have a new file Data Types PY with the exact typings and imports that we need hope you can kind of see the power of AI coding, There are no limits to the scale in which you can run this right, it's really only limited on the imagination of your prompts and the power of your model, but we could have specified many more fields.
Several additional classes, so on and so forth.
Let's go and keep moving.
We now have this type that we can use for our Open AI Api structured outputs call.
Now that we have this type, we can go ahead and add our Openai Large Language Model call on this transcript file.
So how are we going to do that?
Let's go ahead and open up some documentation here.
A really powerful way to utilize a coding assistance is by providing them with examples.
So we're going to do exactly that.
I have the Open AI Python repository open
Here I'm going to go to examples and then if we look@parsing.py, We're going to see an example of how we can utilize Open a Eyes structured outputs, you can see there they have the exact same pattern we have, they have a pedantic base model class built out and then they're just passing it here as a response format in their completions Parse Api so we're going to do here is copy this code example come back to AER and they're going to write this prompt Create Lmt PY again
Same pattern next to main create deff, analyze transcript and then as a parameter of this method we're going to pass in transcript Now this is where things get interesting.
Right you can see here I'm writing a function definition, kind of a function prototype, I'm going to use the Python return type and specify our new type AER can see are typed there, so I'm going to hit down and allow an auto complete, I'm going to hit.then we'll say use this code as an example.
Okay and then I'm going to going to do colon and then I'm going to paste the code example from the Open Eye website.
Okay, we're going to hit here and Hater is going to analyze what we've asked.
Pull in the types as to create LM PY of course will say yes, you can see that file got generated here we're going to skip the installation commands where you have that installed will hit LLM and you can see basically without flaw we have our transcript analysis type getting imported perfectly, we have our LLM right next to Main just as we asked, and now what we can do is ask eight or two just call Analyze transcript inside the main file.
It's also important to call it.
We could have done that in this previous prompt, but that prompt was a little loaded and it's good to simplify things and do one thing at a time here.
Right, remember to keep it simple, especially as you're learning we're going to be running larger prompts that operate on 510 plus files throughout the course for an hour.
Starting small we're moving fast and we're getting things done right so we're going to run another prompt again.
We can quickly just check/tokens to see how we're doing.
We're almost at $0.01 per prompt, right, so this is no problem, these costs are well within, you know what we're willing to pay to just move quickly and get things done so we'll go ahead and clear we can see our three items in the chat and now we're just going to say add analyze transcript you can see EA with the auto complete they can see this function to main Main of course, is going to be our main Up UI file run and print after we'll say after keywords Okay, so our keywords are running here, we want to run the result of this after keywords will just hit enter here we're going to get that import automatically, it is going to write this down here and set everything up to make it happen.
Right so this is awesome go ahead and hit skip again I'll hit D and now you can see right we can just go ahead and review this code.
As we progress through our lessons together, I want you to think of yourself more as a code reviewer and a code curator and a code delegator, unless the programmer actually writing the code.
Right, we're delegating the code writing to our a coding assistant is a mental shift that it's important to make, Okay, so this looks good we now have our prints here and then we have our analyzed transcript and print results at The Bottom just like we asked for.
Right so we go ahead, open up the terminal and we'll kick off this once again, will run this on transcript to kick that off you can see we first got our prints from our word counter and now we have our analysis from open eyes, large language model call and let's go and just look at that again for a second.
Right, we can see analyze transcript, we pass in the transcript and now we're making a call to GPT for O with the transcript and our A coding assistant automatically recognized the pattern from the documentation, just tweaked it a little bit for us right, so now it's going to respond with our transcript analysis type and it passed in the system message you are a helpful assistant analyzing transcripts and then it went ahead and parsed that properly for us.
Right, it looked right at the documentation and it got the exact result we're looking for, So if we look at our results again and just look at what we have here we can see the transcript analysis, Quick summary in this video and need to have Dan discusses the significance of open a eyes.
One reasoning models perfect bullet highlights and you can see here we have a nice set of bullets this is of course a transcript on a YouTube video that we put out on the reasoning models so we have the bullet punch there and then of course we have the sentiment analysis, right, so the sentiment analysis is positive and enthusiastic, really great job if you made it this far and you're following along, we're getting a lot done and we're utilizing, we're leveraging a coding assistance to make it happen, plan your tasks, understand the value of every task so that you can hop into your A coding assistant and run your prompts back to back-to-back review, validate the code and then you can ship the feature Okay, so we're going to do one more thing here you may notice inside of our prompt here you can see we're only passing in our transcript so I want to make one more tweak here let's go ahead and add our word counts.
Right, we have these frequency counters that can be useful for our Open AI Api call.
Let's go ahead and add this as a variable to this method, and let's go ahead and tweak our analysis response to include keywords Right, so it'll basically be a keyword analysis of one of these transcripts.
Right so it'll tell us you know what are the most important keywords and this will be useful for things like SEO keywords for trend analysis, so on and so forth, right, so let's go ahead, pop back to eighter we have everything we need to run this we can run/tokens just to check on our context window We're running at $0.01 a prompt no problem clear and now we'll run this prompt So we'll say update transcript analysis Right, so it's going to be our data types or saying Update our data type and then I'm going to say colon, add keywords colon string and then we're going to do array syntax, Right, so saying add a list of strings as a new variable to this class.
All hit.here update analyze transcript the method right, so remember this is a method
If we hop back to L and PY, we explicitly referencing a function which also gives a location and I'll just say pass in and use word count and again word count is a variable that we have that AER can very clearly see.
Right, there's only one word count That's really important to make sure you don't have any duplicates across your files which eventually you will will discuss solutions for pinpointing variable names and function names when you're operating in 1,000,000 plus line codebases in future videos, and then we'll say update may not PY print keywords, so we also want a list of the keywords that are now going to be added to our Open AI analyzed Transcript Api call, which is based off our initial work count and then we're going to update made up pi and just print those Right, So we've listed everything out in detail and now you can see one by one those changes happening perfectly, so this is really, really cool here.
Right AI coding Assistant is editing three files.
Like I mentioned, there is no limit to this.
Your AI coding assistant will update as many files as you can make clear needs to be edited.
Okay, that has major implications for software engineering.
That means that again think of the Venn diagram that means that if we pass in the right context, the right prompt and we use a powerful enough model we can edit 51020 files and in this course I'm going to take you to the edge of what is possible with these tools and then you're going to take it even further beyond.
Okay, but let's let's come back to earth, Right, we're just a listen to, let's slow it down and let's go ahead and just quickly review our code changes here in our main file, We now are looping over our keyword analysis so that looks great if we go to data types you can see we now have that keywords variable added just as we requested if we look at LLM we're now passing in that word count and our assistant automatically updated our OPI call here with the transcript and the word counts Okay so that's really important and then if we got back to Maine, we can see that analyzed transcript has word count passed in we the print let's go ahead and run we're do the same thing, we'll run this on transcript to and we'll bump up our min count threshold to 15.
Excellent so this application is becoming useful.
We have our cool kind of simplistic word frequency counter.
We then pass that information to an LM prompt where it's generating a quick summary for us.
We're getting a bullet point highlight, We're getting a sentiment analysis to understand the overall mood and narrative of the video.
And now we have our keywords right, if we search something like Oh one right which is part of one of our big keywords you can see in our word counter as one of our high count high hit words.
This is incredible.
Right, we've done a decent amount here, this is multi file editing with AI, we're now moving ourselves up the stack in the age of generative AI with a coding assistance, It's important to think of yourself as a code reviewer and a code curator that approves and rejects code generated by your AI coding Assistant You're becoming an AI powered engineer now the best part about software is that it's fully reusable so we can go ahead, we can just hop in here we can change this to any file and remember you can grab a transcript from Wherever you can run Youtube, download, You can execute this anywhere you want and then run your new application here right and now we have a full transcript analysis bullet point summary, sentiment analysis and some important keywords
This is really cool, this is really powerful we're building this code base up while getting practical experience with AI coding, We reviewed the Add command, the Slash Drop command Let's go ahead and clear our chat window.
Here we reviewed the/clear and also the/tokens command.
Right so I just cleared and dropped everything, so there's nothing in our context window currently, and we also looked at the Run command that lets us run arbitrary shell commands inside of AER, allowing the response to be added to the chat window so we're building up what we can do with our AI code tooling, The most important commands here are the/drop/tokens and the clear we're going to be diving into additional commands in upcoming lessons.
But these are the most important four by far we dove into the Big Three bull's eye principle.
You want to be keeping this imagery in your mind as you progress in your A coding journey.
Imagine the Venn diagram where you have your contacts, your model in your prompt and you always want to be hitting the center of this bull's eye just enough context, the right model and the right prompt you don't want a model that's too powerful and that runs too long and is overkill for your use case.
But you also don't want to create a prompt that is too long, too detailed or too small and doesn't have enough information.
Right, in this course you saw us write several concise prompts you can see over and over we are hitting the center of this bull's eye and that's what you're going to learn.
We're going to continue hitting the center of the Big Three bull's eye.
You've learned to run multi file prompts and add and remove context so that you have just the right information to run your prompts.
And then we made updates across several files, keeping your code relatively lean and modular by separating it out across files, just like you would in a production code base, so this is where you start scaling your Impact as an Engineer leveraging AI to automate repetitive tasks fring you up to focus on High Level work Remember we're up leveling our focus we're slowly moving away from the how to the what it's not that the details aren't important, it's just that your a coding assistant can and should take care of those details for you and the next lesson we're going to be building on these fundamentals even further, we're going to hone your
A coding ability to write high-quality AI coding promps that reduce hallucinations and errors to near zero.
These patterns will also reduce the length of your prompts, allowing you to move even faster.
Context model prompt
As you continue your AI coding journey throughout this course, remember a coding isn't just about writing high-quality code faster than ever, it's about becoming a more effective engineer that ships, features and gets the job done, a coding is simply your new next generation tool to help you accomplish that goal.
It's important to plan your work, write the tasks that need to be accomplished, and by writing them you'll be taking the step to write a high, quality, accurate AI coding prompt It will also make clear what context you need to write whatever feature you're working on Now you're leveraging the power of AI to automate, curate and refine your development and the next lesson we'll expand your aiting prompting abilities by condensing the amount of information you write and your A coding prompts with IDK I'll see you in the next lesson.